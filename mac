<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Machine [
<!ELEMENT Machine (PunctChar*, Field*, FileChannel*, Register*, RegisterArray*, ConditionBit*, RAM*, Set*, Test*, Increment*, Shift*, Logical*, Arithmetic*, Branch*, TransferRtoR*, TransferRtoA*, TransferAtoR*, Decode*, SetCondBit*, IO*, MemoryAccess*, End, Comment*, EQU*, FetchSequence, MachineInstruction*, HighlightingInfo?, LoadingInfo?, ModuleWindowsInfo?) >
<!ATTLIST Machine name CDATA "unnamed">
<!ELEMENT PunctChar EMPTY>
<!ATTLIST PunctChar char CDATA #REQUIRED use  (symbol|token|label|comment|pseudo|illegal) #REQUIRED>
<!ELEMENT Field (FieldValue*)>
<!ATTLIST Field name CDATA #REQUIRED type  (required|optional|ignored) #REQUIRED numBits CDATA #REQUIRED relativity (absolute|pcRelativePreIncr|pcRelativePostIncr) #REQUIRED defaultValue CDATA #REQUIRED signed (true|false) #REQUIRED offset CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT FieldValue EMPTY>
<!ATTLIST FieldValue name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT FileChannel EMPTY>
<!ATTLIST FileChannel file CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Register EMPTY>
<!ATTLIST Register name CDATA #REQUIRED width CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT RegisterArray (Register+)>
<!ATTLIST RegisterArray name CDATA #REQUIRED width CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT ConditionBit EMPTY>
<!ATTLIST ConditionBit name CDATA #REQUIRED bit CDATA #REQUIRED register IDREF #REQUIRED halt (true|false) "false" id ID #REQUIRED>
<!ELEMENT RAM EMPTY>
<!ATTLIST RAM name CDATA #REQUIRED length CDATA #REQUIRED id ID #REQUIRED cellSize CDATA "8">
<!ELEMENT Increment EMPTY>
<!ATTLIST Increment name CDATA #REQUIRED register IDREF #REQUIRED overflowBit IDREF #IMPLIED delta CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Arithmetic EMPTY>
<!ATTLIST Arithmetic name CDATA #REQUIRED type (ADD|SUBTRACT|MULTIPLY|DIVIDE) #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED overflowBit IDREF #IMPLIED  carryBit IDREF #IMPLIED  id ID #REQUIRED>
<!ELEMENT TransferRtoR EMPTY>
<!ATTLIST TransferRtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT TransferRtoA EMPTY>
<!ATTLIST TransferRtoA name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT TransferAtoR EMPTY>
<!ATTLIST TransferAtoR name CDATA #REQUIRED source IDREF #REQUIRED srcStartBit CDATA #REQUIRED dest IDREF #REQUIRED destStartBit CDATA #REQUIRED numBits CDATA #REQUIRED index IDREF #REQUIRED indexStart CDATA #IMPLIED indexNumBits CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT Shift EMPTY>
<!ATTLIST Shift name CDATA #REQUIRED source IDREF #REQUIRED destination IDREF #REQUIRED type (logical | arithmetic | cyclic) #REQUIRED direction (right | left) #REQUIRED distance CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Branch EMPTY>
<!ATTLIST Branch name CDATA #REQUIRED amount CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Logical EMPTY>
<!ATTLIST Logical name CDATA #REQUIRED source1 IDREF #REQUIRED source2 IDREF #REQUIRED destination IDREF #REQUIRED type (AND | OR | NAND | NOR | XOR | NOT) #REQUIRED id ID #REQUIRED>
<!ELEMENT Set EMPTY>
<!ATTLIST Set name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED value CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Test EMPTY >
<!ATTLIST Test name CDATA #REQUIRED register IDREF #REQUIRED start CDATA #REQUIRED numBits CDATA #REQUIRED comparison (EQ | NE | LT | GT | LE | GE ) #REQUIRED value CDATA #REQUIRED omission CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Decode EMPTY >
<!ATTLIST Decode name CDATA #REQUIRED ir IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT IO EMPTY >
<!ATTLIST IO name CDATA #REQUIRED direction (input | output) #REQUIRED type (integer | ascii | unicode) #REQUIRED buffer IDREF #REQUIRED connection CDATA #IMPLIED id ID #REQUIRED>
<!ELEMENT MemoryAccess EMPTY >
<!ATTLIST MemoryAccess name CDATA #REQUIRED direction (read | write ) #REQUIRED memory IDREF #REQUIRED data IDREF #REQUIRED address IDREF #REQUIRED id ID #REQUIRED>
<!ELEMENT SetCondBit EMPTY >
<!ATTLIST SetCondBit name CDATA #REQUIRED bit IDREF #REQUIRED value (0 | 1) #REQUIRED id ID #REQUIRED>
<!ELEMENT End EMPTY>
<!ATTLIST End id ID #REQUIRED>
<!ELEMENT Comment EMPTY>
<!ATTLIST Comment name CDATA #REQUIRED id ID #REQUIRED>
<!ELEMENT Microinstruction EMPTY>
<!ATTLIST Microinstruction microRef IDREF #REQUIRED>
<!ELEMENT MachineInstruction (Microinstruction*)>
<!ATTLIST MachineInstruction name CDATA #REQUIRED opcode CDATA #REQUIRED format CDATA #REQUIRED>
<!ELEMENT FetchSequence (Microinstruction*) >
<!ELEMENT EQU EMPTY>
<!ATTLIST EQU name CDATA #REQUIRED value CDATA #REQUIRED>
<!ELEMENT HighlightingInfo (RegisterRAMPair*)>
<!ELEMENT RegisterRAMPair EMPTY>
<!ATTLIST RegisterRAMPair register IDREF #REQUIRED ram IDREF #REQUIRED dynamic (true|false) #REQUIRED>
<!ELEMENT LoadingInfo EMPTY>
<!ATTLIST LoadingInfo ram IDREF #IMPLIED startingAddress CDATA "0">
<!ELEMENT ModuleWindowsInfo ((RegisterWindowInfo | RegisterArrayWindowInfo | RAMWindowInfo)*) >
<!ELEMENT RegisterWindowInfo EMPTY>
<!ATTLIST RegisterWindowInfo top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode)  "Decimal">
<!ELEMENT RegisterArrayWindowInfo EMPTY>
<!ATTLIST RegisterArrayWindowInfo array IDREF #REQUIRED top CDATA "50" left CDATA "50" width CDATA "300" height CDATA "150" base (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal">
<!ELEMENT RAMWindowInfo EMPTY>
<!ATTLIST RAMWindowInfo ram IDREF #REQUIRED cellSize CDATA "1" top CDATA "50" left CDATA "50" width CDATA "450" height CDATA "450" contentsbase (Decimal|Binary|Hexadecimal|Ascii|UnsignedDec|Unicode) "Decimal" addressbase (Decimal|Binary|Hexadecimal) "Decimal">
]>

<Machine name="mac" >
	<!--............. Punctuation Options .............-->
	<PunctChar char="!" use="symbol" />
	<PunctChar char="#" use="symbol" />
	<PunctChar char="$" use="symbol" />
	<PunctChar char="%" use="symbol" />
	<PunctChar char="&amp;" use="symbol" />
	<PunctChar char="^" use="symbol" />
	<PunctChar char="_" use="symbol" />
	<PunctChar char="`" use="symbol" />
	<PunctChar char="*" use="symbol" />
	<PunctChar char="?" use="symbol" />
	<PunctChar char="@" use="symbol" />
	<PunctChar char="~" use="symbol" />
	<PunctChar char="+" use="symbol" />
	<PunctChar char="-" use="symbol" />
	<PunctChar char="(" use="token" />
	<PunctChar char=")" use="token" />
	<PunctChar char="," use="token" />
	<PunctChar char="/" use="token" />
	<PunctChar char="=" use="token" />
	<PunctChar char="[" use="token" />
	<PunctChar char="\" use="token" />
	<PunctChar char="]" use="token" />
	<PunctChar char="{" use="token" />
	<PunctChar char="|" use="token" />
	<PunctChar char="}" use="token" />
	<PunctChar char="." use="pseudo" />
	<PunctChar char=":" use="label" />
	<PunctChar char=";" use="comment" />

	<!--......... machine instruction fields ............-->
	<Field name="OPCODE16" type="required" numBits="16" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field42ed09b5">
	</Field>
	<Field name="ADDRESS" type="required" numBits="12" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field3a486d18">
	</Field>
	<Field name="OPCODE" type="required" numBits="4" relativity="absolute" signed="false" offset="0" defaultValue="0" id="Field14a58f6d">
	</Field>

	<!--............. FileChannels .................-->
	<!-- none -->

	<!--............. registers .....................-->
	<Register name="AC" width="16" id="module.Register584ebb6b" />
	<Register name="AR" width="12" id="module.Register72c4a176" />
	<Register name="DR" width="16" id="module.Registerb1d329b" />
	<Register name="E" width="1" id="module.Register337b0a72" />
	<Register name="FGI" width="1" id="module.Register1e436a95" />
	<Register name="FGO" width="1" id="module.Register495bb73a" />
	<Register name="I" width="1" id="module.Register2b30cd60" />
	<Register name="IEN" width="1" id="module.Register40737aee" />
	<Register name="INPR" width="8" id="module.Register4561a7b7" />
	<Register name="IR" width="16" id="module.Register7c61b6d9" />
	<Register name="OUTR" width="8" id="module.Register271e07b1" />
	<Register name="PC" width="12" id="module.Register6f0a40fa" />
	<Register name="S" width="1" id="module.Register7279247" />
	<Register name="TR" width="16" id="module.Register76012b04" />

	<!--............. register arrays ...............-->
	<!-- none -->

	<!--............. condition bits ................-->
	<ConditionBit name="E" bit="0" register="module.Register337b0a72" halt="false" id="module.ConditionBit21f589fa" />
	<ConditionBit name="S" bit="0" register="module.Register7279247" halt="true" id="module.ConditionBit1cc500ae" />

	<!--............. rams ..........................-->
	<RAM name="RAM" length="4096" cellSize="16" id="module.RAM27cb0cdb" />

	<!--............. set ...........................-->
	<Set name="AC&lt;-0" register="module.Register584ebb6b" start="0" numBits="16" value="0" id="microinstruction.CpusimSet797b7627" />
	<Set name="FGI&lt;-0" register="module.Register1e436a95" start="0" numBits="1" value="0" id="microinstruction.CpusimSet63d479f9" />
	<Set name="FGI&lt;-1" register="module.Register1e436a95" start="0" numBits="1" value="1" id="microinstruction.CpusimSet37d44e4b" />
	<Set name="FGO&lt;-0" register="module.Register495bb73a" start="0" numBits="1" value="0" id="microinstruction.CpusimSet49b5044b" />
	<Set name="FGO&lt;-1" register="module.Register495bb73a" start="0" numBits="1" value="1" id="microinstruction.CpusimSet42d6ebb8" />

	<!--............. test ..........................-->
	<Test name="IF AC NEGATIVE" register="module.Register584ebb6b" start="0" numBits="1" comparison="EQ" value="1" omission="1" id="microinstruction.Test7147d6a7" />
	<Test name="IF AC POSITIVE" register="module.Register584ebb6b" start="0" numBits="1" comparison="EQ" value="0" omission="1" id="microinstruction.Test49ebbc9f" />
	<Test name="IF(DR=0)" register="module.Registerb1d329b" start="0" numBits="16" comparison="EQ" value="0" omission="1" id="microinstruction.Test58ed5a2d" />

	<!--............. increment .....................-->
	<Increment name="AC&lt;-AC+1" register="module.Register584ebb6b" delta="1" id="microinstruction.Increment64c29eb1" />
	<Increment name="AR&lt;-AR+1" register="module.Register72c4a176" delta="1" id="microinstruction.Increment555ab293" />
	<Increment name="DR&lt;-DR+1" register="module.Registerb1d329b" delta="1" id="microinstruction.Increment612e08e6" />
	<Increment name="PC&lt;-PC+1" register="module.Register6f0a40fa" delta="1" id="microinstruction.Increment1efc6dcc" />

	<!--............. shift .........................-->
	<!-- none -->

	<!--............. logical .......................-->
	<Logical name="AC&lt;-AC'" type="NOT" source1="module.Register584ebb6b" source2="module.Register584ebb6b" destination="module.Register584ebb6b" id="microinstruction.Logical3d3afd2a" />
	<Logical name="AC&lt;-AC^DR" type="AND" source1="module.Register584ebb6b" source2="module.Registerb1d329b" destination="module.Register584ebb6b" id="microinstruction.Logical3d44d562" />

	<!--............. arithmetic ....................-->
	<Arithmetic name="AC&lt;-AC+DR" type="ADD" source1="module.Register584ebb6b" source2="module.Registerb1d329b" destination="module.Register584ebb6b" carryBit="module.ConditionBit21f589fa" id="microinstruction.Arithmetic40ab5d0b" />

	<!--............. branch ........................-->
	<!-- none -->

	<!--............. transferRtoR ..................-->
	<TransferRtoR name="AC-&lt;DR" source="module.Registerb1d329b" srcStartBit="0" dest="module.Register584ebb6b" destStartBit="0" numBits="16" id="microinstruction.TransferRtoR7fe62702" />
	<TransferRtoR name="AC&lt;-INPR" source="module.Register4561a7b7" srcStartBit="0" dest="module.Register584ebb6b" destStartBit="8" numBits="8" id="microinstruction.TransferRtoR4a27e915" />
	<TransferRtoR name="AR&lt;-IR[4-15]" source="module.Register7c61b6d9" srcStartBit="4" dest="module.Register72c4a176" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR379b540c" />
	<TransferRtoR name="AR&lt;-PC" source="module.Register6f0a40fa" srcStartBit="0" dest="module.Register72c4a176" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR2cef7858" />
	<TransferRtoR name="OUTR&lt;-AC" source="module.Register584ebb6b" srcStartBit="8" dest="module.Register271e07b1" destStartBit="0" numBits="8" id="microinstruction.TransferRtoR2465a770" />
	<TransferRtoR name="PC&lt;-AR" source="module.Register72c4a176" srcStartBit="0" dest="module.Register6f0a40fa" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR36362bcb" />
	<TransferRtoR name="PC&lt;-DR" source="module.Registerb1d329b" srcStartBit="0" dest="module.Register6f0a40fa" destStartBit="0" numBits="12" id="microinstruction.TransferRtoR7826c438" />

	<!--............. transferRtoA ..................-->
	<!-- none -->

	<!--............. transferAtoR ..................-->
	<!-- none -->

	<!--............. decode ........................-->
	<Decode name="DECODE IR" ir="module.Register7c61b6d9" id="microinstruction.Decode15f0d404" />

	<!--............. set condition bit .............-->
	<SetCondBit name="S&lt;-0" bit="module.ConditionBit1cc500ae" value="1" id="microinstruction.SetCondBit138dce54" />

	<!--............. io ............................-->
	<IO name="INPR" direction="input" type="integer" buffer="module.Register4561a7b7" connection="[console]" id="microinstruction.IO6639489c" />
	<IO name="OUTR" direction="output" type="integer" buffer="module.Register271e07b1" connection="[console]" id="microinstruction.IO41e31144" />

	<!--............. memory access .................-->
	<MemoryAccess name="AR&lt;-M[AR]" direction="read" memory="module.RAM27cb0cdb" data="module.Register72c4a176" address="module.Register72c4a176" id="microinstruction.MemoryAccess669e4f77" />
	<MemoryAccess name="DR&lt;-M[AR]" direction="read" memory="module.RAM27cb0cdb" data="module.Registerb1d329b" address="module.Register72c4a176" id="microinstruction.MemoryAccess420a435a" />
	<MemoryAccess name="IR&lt;-M[AR]" direction="read" memory="module.RAM27cb0cdb" data="module.Register7c61b6d9" address="module.Register72c4a176" id="microinstruction.MemoryAccess45e540a3" />
	<MemoryAccess name="M[AR]&lt;-AC" direction="write" memory="module.RAM27cb0cdb" data="module.Register584ebb6b" address="module.Register72c4a176" id="microinstruction.MemoryAccessb2c4b23" />
	<MemoryAccess name="M[AR]&lt;-DR" direction="write" memory="module.RAM27cb0cdb" data="module.Registerb1d329b" address="module.Register72c4a176" id="microinstruction.MemoryAccess3606d732" />
	<MemoryAccess name="M[AR]&lt;-PC" direction="write" memory="module.RAM27cb0cdb" data="module.Register6f0a40fa" address="module.Register72c4a176" id="microinstruction.MemoryAccess18effeb6" />

	<!--............. end ...........................-->
	<End id="microinstruction.End86f7e62" />

	<!--............. comment ...........................-->
	<!-- none -->

	<!--............. global equs ..................-->
	<!-- none -->

	<!--............. fetch sequence ................-->
	<FetchSequence>
		<Microinstruction microRef="microinstruction.TransferRtoR2cef7858" />
		<Microinstruction microRef="microinstruction.MemoryAccess45e540a3" />
		<Microinstruction microRef="microinstruction.Increment1efc6dcc" />
		<Microinstruction microRef="microinstruction.TransferRtoR379b540c" />
		<Microinstruction microRef="microinstruction.Decode15f0d404" />
	</FetchSequence>

	<!--............. machine instructions ..........-->

	<MachineInstruction name="SNA" opcode="e008" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.Test7147d6a7" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
		<Microinstruction microRef="microinstruction.Increment1efc6dcc" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="SPA" opcode="e010" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.Test49ebbc9f" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
		<Microinstruction microRef="microinstruction.Increment1efc6dcc" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="CLA" opcode="e800" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.CpusimSet797b7627" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="INC" opcode="e020" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.Increment64c29eb1" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="CMA" opcode="e200" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.Logical3d3afd2a" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="OUT" opcode="f400" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.CpusimSet42d6ebb8" />
		<Microinstruction microRef="microinstruction.TransferRtoR2465a770" />
		<Microinstruction microRef="microinstruction.IO41e31144" />
		<Microinstruction microRef="microinstruction.CpusimSet49b5044b" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="HLT" opcode="e001" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.SetCondBit138dce54" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="INP" opcode="f800" format="OPCODE16" >
		<Microinstruction microRef="microinstruction.IO6639489c" />
		<Microinstruction microRef="microinstruction.CpusimSet37d44e4b" />
		<Microinstruction microRef="microinstruction.TransferRtoR4a27e915" />
		<Microinstruction microRef="microinstruction.CpusimSet63d479f9" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="AND1" opcode="1" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess669e4f77" />
		<Microinstruction microRef="microinstruction.MemoryAccess420a435a" />
		<Microinstruction microRef="microinstruction.Logical3d44d562" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="ISZ" opcode="c" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess420a435a" />
		<Microinstruction microRef="microinstruction.Increment612e08e6" />
		<Microinstruction microRef="microinstruction.MemoryAccess3606d732" />
		<Microinstruction microRef="microinstruction.Test58ed5a2d" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
		<Microinstruction microRef="microinstruction.Increment1efc6dcc" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="BSA" opcode="a" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess18effeb6" />
		<Microinstruction microRef="microinstruction.Increment555ab293" />
		<Microinstruction microRef="microinstruction.TransferRtoR36362bcb" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="BUN" opcode="8" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.TransferRtoR36362bcb" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="STA" opcode="6" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccessb2c4b23" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="LDA" opcode="4" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess420a435a" />
		<Microinstruction microRef="microinstruction.TransferRtoR7fe62702" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="ADD" opcode="2" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess420a435a" />
		<Microinstruction microRef="microinstruction.Arithmetic40ab5d0b" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<MachineInstruction name="AND" opcode="0" format="OPCODE ADDRESS" >
		<Microinstruction microRef="microinstruction.MemoryAccess420a435a" />
		<Microinstruction microRef="microinstruction.Logical3d44d562" />
		<Microinstruction microRef="microinstruction.End86f7e62" />
	</MachineInstruction>

	<!--............. highlighting info .............-->
	<HighlightingInfo>
	</HighlightingInfo>

	<!--............. loading info ..................-->
	<LoadingInfo ram="module.RAM27cb0cdb" startingAddress="0" />

	<!--............. module window info ............-->
	<ModuleWindowsInfo>
		<RAMWindowInfo ram="module.RAM27cb0cdb" cellSize="1" contentsbase="Hexadecimal" addressbase="Hexadecimal" 
			top="45" left="80" width="450" height="450" />
		<RegisterWindowInfo base="Hexadecimal" 
			top="88" left="506" width="329" height="289" />
	</ModuleWindowsInfo>

</Machine>
